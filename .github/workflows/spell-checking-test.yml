name: Retrieve Logs Example

on:
  pull_request:
    branches:
      - main

permissions:
  checks: read
  contents: read
  pull-requests: read

jobs:
  example_job:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Run a command and create an annotation
        run: |
          echo "Hello, world!"
          echo "::warning file=example.txt,line=1,col=5::This is a warning annotation!"

      - name: Upload annotation log
        id: upload_annotation
        run: echo "Uploading annotations after the job completes"

  get_logs:
    needs: example_job
    runs-on: ubuntu-latest
    steps:
      - name: Retrieve job logs
        run: |
          echo "Retrieving logs..."

          # Set the variables for repo details and run/job info
          REPO="marcalexiei/review-dog-languagetool-playground"
          RUN_ID="${{ github.run_id }}"
          JOB_NAME="example_job"

          # Get job ID for 'example_job'
          JOB_ID=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/$REPO/actions/runs/$RUN_ID/jobs | \
            jq -r ".jobs[] | select(.name == \"$JOB_NAME\") | .id")

          # Get logs for the job, including annotations
          curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/$REPO/actions/runs/$RUN_ID/jobs/$JOB_ID/logs" \
            -o job_logs.tar.gz

          echo "Logs saved as job_logs.tar.gz"

# name: Spell Checker 2

# on: [pull_request]

# jobs:
#   spell_checking:
#     name: LanguageTool
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Review dog languagetool
#         id: "review"
#         uses: reviewdog/action-languagetool@v1
#         with:
#           github_token: ${{ secrets.GITHUB_TOKEN }}
#           # Change reviewdog reporter if you need [github-pr-check,github-check,github-pr-review].
#           reporter: "github-pr-check"
#           # Change reporter level if you need.
#           level: "error"
#           patterns: "**/*.md **/*.txt **/*.mdx"
#           #enabled_categories: 'STYLE,PLAIN_ENGLISH,WHITESPACE_RULE,EN_QUOTES,DASH_RULE,WORD_CONTAINS_UNDERSCORE,UPPERCASE_SENTENCE_START,ARROWS,COMMA_PARENTHESIS_WHITESPACE,UNLIKELY_OPENING_PUNCTUATION,SENTENCE_WHITESPACE,EN_UNPAIRED_BRACKETS,PHRASE_REPETITION,PUNCTUATION_PARAGRAPH_END'
#           disabled_categories: ""
#           disabled_rules: ""

#       - name: Check for error annotations
#         id: check_annotations
#         run: |
#           # Check for any `::error` annotations in the logs
#           if grep -q '::error' $GITHUB_ENV; then
#             echo "Error annotations found!"
#             exit 1
#           else
#             echo "No error annotations found."
#           fi

#       - name: Continue with other steps
#         run: echo "No errors detected in the previous step."
